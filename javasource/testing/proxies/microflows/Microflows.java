// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package testing.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the Testing module
	public static void aCT_ConfirmTransaction(IContext context, braintreegateway.proxies.Client _client, testing.proxies.Payment _payment)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Client", _client == null ? null : _client.getMendixObject());
		params.put("Payment", _payment == null ? null : _payment.getMendixObject());
		Core.microflowCall("Testing.ACT_ConfirmTransaction").withParams(params).execute(context);
	}
	public static void aCT_FindTransaction(IContext context, testing.proxies.TransactionSearch _transactionSearch)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TransactionSearch", _transactionSearch == null ? null : _transactionSearch.getMendixObject());
		Core.microflowCall("Testing.ACT_FindTransaction").withParams(params).execute(context);
	}
	public static boolean afterStartup(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("Testing.AfterStartup").withParams(params).execute(context);
	}
	public static void aS_Country_Import(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("Testing.AS_Country_Import").withParams(params).execute(context);
	}
	public static java.util.List<testing.proxies.Configuration> configuration(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("Testing.Configuration").withParams(params).execute(context);
		java.util.List<testing.proxies.Configuration> result = null;
		if (objs != null)
		{
			result = new java.util.ArrayList<>();
			for (IMendixObject obj : objs)
				result.add(testing.proxies.Configuration.initialize(context, obj));
		}
		return result;
	}
	public static testing.proxies.Payment dS_Payment_Random(IContext context, testing.proxies.Person _person)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Person", _person == null ? null : _person.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("Testing.DS_Payment_Random").withParams(params).execute(context);
		return result == null ? null : testing.proxies.Payment.initialize(context, result);
	}
	public static testing.proxies.Person dS_Person(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("Testing.DS_Person").withParams(params).execute(context);
		return result == null ? null : testing.proxies.Person.initialize(context, result);
	}
	public static void nAV_CreateTransaction(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("Testing.NAV_CreateTransaction").withParams(params).execute(context);
	}
	public static void nAV_Payment(IContext context, testing.proxies.Payment _payment)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Payment", _payment == null ? null : _payment.getMendixObject());
		Core.microflowCall("Testing.NAV_Payment").withParams(params).execute(context);
	}
}